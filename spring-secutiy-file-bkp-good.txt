package com.telusko.secureapp;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import java.util.ArrayList;
import java.util.List;


@Configuration
@EnableWebSecurity
public class AppSecurityConfig extends WebSecurityConfigurerAdapter {

	
	@Bean
	@Override
	protected UserDetailsService userDetailsService() {
		 
		List<UserDetails>users = new ArrayList<>();
		users.add(User.withDefaultPasswordEncoder().username("mahesh").password("mahesh").roles("USER").build());
		users.add(User.withDefaultPasswordEncoder().username("sumit").password("sumit").roles("ADMIN").build());
		
		return new InMemoryUserDetailsManager(users);
		
	}

	
	@Override
    protected void configure(HttpSecurity http) throws Exception {
        
		http.authorizeRequests()
        .antMatchers("/h2-console/**").hasRole("ADMIN")//allow h2 console access to admins only
        .anyRequest().authenticated()//all other urls can be access by any authenticated role
        .and().formLogin()//enable form login instead of basic login
        .and().csrf().ignoringAntMatchers("/h2-console/**")//don't apply CSRF protection to /h2-console
        .and().headers().frameOptions().sameOrigin();//allow use of frame to same origin urls
        
	}    
	
}
